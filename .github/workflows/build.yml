name: Build

on:
  push:
    branches:
      - main
      - d3d9client
    paths-ignore: [ 'Doc/**', 'Flights/**', 'Html/**', 'Images/**', 'Localdoc/**', 'Scenarios/**', 'Textures/**', 'Textures2/**']
  pull_request:
    branches:
      - main
    paths-ignore: [ 'Doc/**', 'Flights/**', 'Html/**', 'Images/**', 'Localdoc/**', 'Scenarios/**', 'Textures/**', 'Textures2/**']

jobs:
  build:
    name: Build with CMake
    env:
      DXSDK_DIR: "${{ github.workspace }}\\DXSDK"
    strategy:
      fail-fast: false
      matrix:
        architecture: [x64, x86]
      
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup Problem Matcher
      uses: ammaraskar/msvc-problem-matcher@master
      
    - name: Prepare
      run: |
        mkdir out\build
        mkdir out\install
    
    - name: Cache irrKlang package
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}\out\build\Extern\irrKlang\${{ matrix.architecture }}
        key: irrKlang-${{ matrix.architecture }}
        
    - name: Cache DirectX SDK
      id:   cache
      uses: actions/cache@v2
      with:
        path: "${{ github.workspace }}\\DXSDK"
        key:  dxsdk_jun10

    - name: Download DirectX SDK
      if:   steps.cache.outputs.cache-hit != 'true'
      shell: cmd
      run: |
         curl -L https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe
         7z x DXSDK_Jun10.exe DXSDK/Include
         7z x DXSDK_Jun10.exe DXSDK/Lib
         del DXSDK_Jun10.exe
         dir /S /B DXSDK

    - name: Build & Test
      shell: cmd
      working-directory: ${{ github.workspace }}/out/build
      run: |
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.architecture }}
        cmake -G Ninja ../.. -DORBITER_MAKE_DOC=OFF -DIRRKLANG_DIR:STRING="irrKlang_DOWNLOAD"
        cmake --build . --config RelWithDebInfo
        ctest --config RelWithDebInfo .

    - name: Install
      run: cmake --install . --prefix  ${{ github.workspace }}\out\install
      working-directory: ${{ github.workspace }}\out\build

    - name: Pack
#      if: ${{ github.ref == 'refs/heads/main' }}
      working-directory: ${{ github.workspace }}\out\install\Orbiter
      shell: cmd
      run: '7z a "${{ github.workspace }}\out\spxp-rtss-${{ matrix.architecture }}.zip" .'

    - name: Upload Build Artifact
#      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/upload-artifact@v2.2.4
      with:
        name: Orbiter-${{ matrix.architecture }}
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{ github.workspace }}\out\spxp-rtss-${{ matrix.architecture }}.zip
        retention-days: 60

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ github.ref_name }}.${{ github.run_number }}.a
        release_name: SpXp RTSS ${{ github.ref_name }}.${{ github.run_number }}-${{ matrix.architecture }}
        draft: true
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#        asset_path: ./spacexpanse-bin-${{ github.job }}.zip
        asset_path: D:\a\Real-Time-Solar-System\Real-Time-Solar-System\out\spxp-rtss-${{ matrix.architecture }}.zip
#        asset_name: spacexpanse-rtss-bin-${{ github.job }}.zip
        asset_name: spxp-rtss-${{ matrix.architecture }}.zip
        asset_content_type: application/zip